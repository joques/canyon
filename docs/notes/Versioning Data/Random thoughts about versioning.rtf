{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww20280\viewh14800\viewkind0
\deftab709
\pard\pardeftab709\li720\fi-360\ri-618\qj\partightenfactor0
\ls1\ilvl0
\f0\fs24 \cf0 \'95	
\f1 Each key will have a collection of versions.\
\ls1\ilvl0
\f0 \'95	
\f1 Each version is a value with a different timestamp.\
\ls1\ilvl0
\f0 \'95	
\f1 This is simply a duplication of keys, but the best way to distinguish will be the value (key-value store) of each duplicate.\
\ls1\ilvl0
\f0 \'95	
\f1 During the merge/reconciliation process, we will use a Tree Data Structure to sort and store keys from old segments into new segments. We are using a Tree DS to sort according to timestamp.\
\ls1\ilvl0
\f0 \'95	
\f1 New segments will have a two-way sorting sequence;\
\pard\pardeftab709\li1080\fi-360\ri-618\qj\partightenfactor0
\ls1\ilvl1
\f2 \cf0 \uc0\u9702 
\f0 	
\f1 first by key\
\ls1\ilvl1
\f2 \uc0\u9702 
\f0 	
\f1 then by timestamp\
\pard\pardeftab709\li720\fi-360\ri-618\qj\partightenfactor0
\ls1\ilvl0
\f0 \cf0 \'95	
\f1 Actually storing all merged segments by collected keys is unclear to me right now.\
\ls1\ilvl0
\f0 \'95	
\f1 But having a two-way sort where keys will be sorted, then the timestamp sounds right.\
\ls1\ilvl0
\f0 \'95	
\f1 Duplicate keys will be contiguous to each other (line-by-line), sorted from oldest to latest.\
\ls1\ilvl0
\f0 \'95	
\f1 Internally in the storage engine design, it won\'92t actually be stored in a collection-like design. It will simply have the keys (duplicate and otherwise) stored line-by-line with the oldest first followed by the latest timestamp. But in the higher-level/abstract designs, we will have a collection-like design}